buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.+'
    id "com.modrinth.minotaur" version "2.+"
}

apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

archivesBaseName = "${artifact_id}-forge-${minecraft_version}"

minecraft {
    mappings channel: 'parchment', version: "${parchment_minecraft_version}-${parchment_version}-${minecraft_version}"

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('runserver')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

configurations {
    testCompileOnly.extendsFrom(compileOnly)
}

jarJar.enable()

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly project(":Common")

    compileOnly group:'com.google.auto.service', name:'auto-service', version:'1.0.1'
    annotationProcessor group:'com.google.auto.service', name:'auto-service', version:'1.0.1'

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    //compileOnly(fg.deobf("curse.maven:hyle-609850:3748968"))

    compileOnly(fg.deobf("mezz.jei:jei-${rootProject.jei_minecraft_version}-common-api:${rootProject.jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${rootProject.jei_minecraft_version}-forge-api:${rootProject.jei_version}"))
    // at runtime, use the full JEI jar
    //runtimeOnly(fg.deobf("mezz.jei:jei-${rootProject.minecraft_version}:${rootProject.jei_version}"))

    compileOnly("me.shedaniel:RoughlyEnoughItems-api:${rootProject.rei_version}"){transitive=false}

    implementation(fg.deobf("dev.lukebemish.dynamicassetgenerator:dynamicassetgenerator-forge-${rootProject.minecraft_version}:${rootProject.dynassetgen_version}"))
    implementation(fg.deobf("dev.lukebemish.defaultresources:defaultresources-forge-${rootProject.minecraft_version}:${rootProject.defaultresources_version}"))

    minecraftLibrary("blue.endless:jankson:1.2.1")

    jarJar("dev.lukebemish.defaultresources:defaultresources-forge-${rootProject.minecraft_version}:[${rootProject.defaultresources_version},)")
    jarJar(group: "blue.endless", name: "jankson", version:"[$project.jankson_version,)")
}

mixin {
    add sourceSets.main, 'excavated_variants.refmap.json'
    config 'mixin.excavated_variants_forge.json'
    add project(":Common").sourceSets.main, 'excavated_variants.refmap.json'
    config 'mixin.excavated_variants.json'
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

processResources {
    from project(":Common").sourceSets.main.resources
}


jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact tasks.jarJar
            artifact sourcesJar
            artifact javadocJar
        }
    }
    repositories {
    }
}

// Publishing

if (project.hasProperty("curseforge_key")) {
    curseforge {
        apiKey = project.curseforge_key
        project {
            id = '577411'
            changelog = modGitPublisher.changelog
            releaseType = "${project.release_type}"
            addGameVersion "${project.minecraft_version}"
            addGameVersion 'Forge'
            mainArtifact(tasks.jarJar) {
                displayName = "Excavated Variants [Forge] v$project.version"
            }
            relations {
                requiredDependency 'dynamic-asset-generator'
            }
        }
        options {
            forgeGradleIntegration = true
        }
    }
}

if (project.hasProperty("modrinth_key")) {
    modrinth {
        token = project.modrinth_key
        projectId = 'IZaMGxb0'
        versionNumber = "$project.version"
        versionType = "${project.release_type}"
        detectLoaders = false
        changelog = modGitPublisher.changelog
        uploadFile = tasks.jarJar
        gameVersions = ["${project.minecraft_version}"]
        loaders = ['forge']
        dependencies {
            required.project 'dynamic_asset_generator'
        }
    }
}

tasks.build.dependsOn tasks.jarJar

reobf {
    jarJar {}
}

tasks.jarJar.finalizedBy("reobfJarJar")

afterEvaluate {
    tasks.curseforge.dependsOn tasks.jarJar
    tasks.modrinth.dependsOn tasks.jarJar
    tasks.jarJar {
        archiveClassifier = ''
    }
    jar {
        archiveClassifier = 'partial'
    }
}